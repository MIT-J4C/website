---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import { Icon } from "astro-icon/components";
import FormattedDate from "@/components/FormattedDate.astro";

interface Props {
	content: CollectionEntry<"post">;
}

const {
	content: { data },
} = Astro.props;

const dateTimeOptions: Intl.DateTimeFormatOptions = {
	month: "long",
};
---

{
	data.coverImage && (
		<div class="mb-6 aspect-[16/9]">
			<Image
				alt={data.coverImage.alt}
				class="object-cover"
				fetchpriority="high"
				loading="eager"
				src={data.coverImage.src}
			/>
		</div>
	)
}
{data.draft ? <span class="text-base text-red-500">(Draft)</span> : null}
<h1 class="title">
	{data.title}
</h1>
<div class="flex flex-wrap items-center gap-x-3 gap-y-2">
	<p class="font-semibold">
		<FormattedDate date={data.publishDate} dateTimeOptions={dateTimeOptions} /> /{" "}
		{/* @ts-ignore:next-line. TODO: add reading time to collection schema? */}
		{data.readingTime}
	</p>
	{
		data.updatedDate && (
			<span class="rounded-lg bg-quote/5 px-2 py-1 text-quote">
				Updated:
				<FormattedDate class="ms-1" date={data.updatedDate} dateTimeOptions={dateTimeOptions} />
			</span>
		)
	}
</div>
{
	!!data.tags?.length && (
		<div class="mt-2">
			<Icon name="tabler:tags" class="inline-block h-6 w-6" />
			{data.tags.map((tag, i) => (
				<>
					{/* prettier-ignore */}
					<span class="contents">
						<a aria-label={`View more statements with the tag ${tag}`} class="cactus-link inline-block before:content-['#']" data-pagefind-filter="tag" href={`/tags/${tag}/`}>{tag}
						</a>{i < data.tags.length - 1 && ", "}
					</span>
				</>
			))}
		</div>
	)
}
